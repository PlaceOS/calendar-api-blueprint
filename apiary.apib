FORMAT: 1A
HOST: https://example.domain/

# PlaceOS Staff API

PlaceOS Staff API calls.


## Calendars [/api/staff/v1/calendars]

### List personal calendars [GET]

List users calendars

+ Response 200 (application/json)

        [
          {
            id: "calendar@id",
            name: "My Calendar",
            primary: true,
            can_edit: true
          }
        ]

### Available rooms [GET /api/staff/v1/calendars/availability?zone_ids={zone_ids}&system_ids={system_ids}&calendars={calendars}&period_start={period_start}&period_end={period_end}&capacity={capacity}&features={features}]

Lists rooms that are available in the time period specified

+ Parameters
    + zone_ids: `id1,id2` (Query param, optional) - (string) check rooms in the selected zones
    + system_ids: `sys1,sys2` (Query param, optional) - (string) check specified rooms
    + calendars: `cal1_id,cal2_id` (Query param, optional) - (string) check specified user calendars
    + capacity: `6` (Query param, optional) - (integer) the minimum space required
    + features: `vidconf,whiteboard` (Query param, optional) - (string) a comma seperated list of room requirements
    + period_start: `12345` (Query param, required) - (integer) unix epoch start time 
    + period_end: `23456` (Query param, required) - (integer) unix epoch end time

+ Response 200 (application/json)

        [
          {
            id: "some_calendar@id"
          },
          {
            id: "personal_calendar@id",
            name: "My Personal Calendar"
          },
          {
            id: "resource_calendar@id",
            name: "Resource Calendar Name",
            system: {
                id: "system id used to obtain this event",
                name: "system display name",
                capacity: 3,
                features: "VidConf Whiteboard",
                bookable: true
            }
          }
        ]


## Events [/api/staff/v1/events]

Events here refer to PlaceOS' abstraction of [MS Graph](https://docs.microsoft.com/en-us/graph/api/resources/event?view=graph-rest-1.0) (aka Office365) or [Google Calendar](https://developers.google.com/calendar/v3/reference/events) Events
The purpose of the abstraction is to allow clients of the PlaceOS Staff API to not need to be concerned about which Calendar system is in use, while associating room resource calendars with PlaceOS Systems (usually a 1:1 mapping)

### List events occuring [GET /api/staff/v1/events?zone_ids={zone_ids}&system_ids={system_ids}&calendars={calendars}&period_start={period_start}&period_end={period_end}&include_cancelled={include_cancelled}]

Attachments won't be returned on this request

+ Parameters
    + zone_ids: `id1,id2` (Query param, optional) - (string) grab events from rooms in the selected zones
    + system_ids: `sys1,sys2` (Query param, optional) - (string) grab events from specified rooms
    + calendars: `cal1_id,cal2_id` (Query param, optional) - (string) grab events from user calendars
    + period_start: `12345` (Query param, required) - (integer) unix epoch start time 
    + period_end: `23456` (Query param, required) - (integer) unix epoch end time
    + include_cancelled: `true` (Query param, optional) - (bool) include events that have been cancelled in the results
    
+ Response 200 (application/json)

        [
            {
                id: "abcd",
                status: "accepted",
                host: "user@email",
                calendar: "calendar_id",
                creator: "optional@secretary",
                attendees: [
                    {
                        name: "Steve",
                        email: "bob@place.com"
                    },
                    {
                        name: "Bob",
                        email: "bob@place.com",
                        checked_in: false,
                        visit_expected: true,
                    }
                ],
                title:  "name of the meeting",
                body: "event details",
                private: false,
                event_start: 12345,
                event_end: 23456,
                timezone: "Sydney",
                all_day: false,
                location: "clear text location",
                recurring: true,
                recurrence: {
                    range_start: 12345,
                    range_end: 23456,
                    days_of_week: 4,
                    interval: 2,
                    pattern: 1
                },
                recurring_master_id: "abcd",
                attachments: [
                    {
                        name: "file_name.ext",
                        blob: "base64 bytes"
                    }
                ],
                system: {
                    id: "system id used to obtain this event",
                    name: "system display name",
                    capacity: 3,
                    features: "VidConf Whiteboard",
                    bookable: true
                },
                extension_data: {
                    whatever: "you want"
                }
            }
        ]

### Get an event [GET /api/staff/v1/events/{event_id}/?system_id={system_id}&calendar={calendar}]

Returns the complete details of an event

+ Parameters
    + event_id: `id` (URI param, required) - (string) the ID of the event
    + calendar: `personal@calendar` (Query param, optional) - (string) the personal calendar this event exists on
    + system_id: `sysid` (Query param, optional) - (string) the system representing the calendar this event exists on

+ Response 200

        {
            id: "abcd",
            status: "accepted",
            host: "user@email",
            calendar: "calendar_id",
            creator: "optional@secretary",
            attendees: [
                {
                    name: "Bob",
                    email: "bob@place.com"
                }
            ],
            title:  "name of the meeting",
            body: "event details",
            private: false,
            event_start: 12345,
            event_end: 23456,
            timezone: "Sydney",
            all_day: false,
            location: "clear text location",
            recurring: true,
            recurrence: {
                range_start: 12345,
                range_end: 23456,
                days_of_week: 4,
                interval: 2,
                pattern: 1
            },
            recurring_master_id: "abcd",
            attachments: [
                {
                    name: "file_name.ext",
                    blob: "base64 bytes"
                }
            ],
            system: {
                id: "system id used to obtain this event",
                name: "system display name",
                capacity: 3,
                features: "VidConf Whiteboard",
                bookable: true
            },
            extension_data: {
                whatever: "you want"
            }
        }


### Create an event [POST /api/staff/v1/events/]

Creates an event

+ Request (application/json)

        {
            id: "abcd",
            host: "calendar_id_if_not_users_default",
            system_id: "system_id we want to make a booking for",
            attendees: [
                {
                    name: "Bob",
                    email: "bob@place.com",
                    visit_expected: true
                },
                {
                    email: "steve@mail.com"
                }
            ],
            title:  "name of the meeting",
            body: "new event details",
            private: false,
            event_start: 12345,
            event_end: 23456,
            timezone: "Sydney",
            all_day: false,
            location: "clear text location",
            recurring: true,
            recurrence: {
                range_start: 12345,
                range_end: 23456,
                days_of_week: 4,
                interval: 2,
                pattern: 1
            },
            attachments: [
                {
                    name: "file_name.ext",
                    blob: "base64 bytes"
                }
            ],
            extension_data: {
                whatever: "you want",
                catering_order: [{
                    item: "Choc Cake",
                    qty: 1
                }]
            }
        }

+ Response 202 (application/json)

        {
            id: "abcd",
            status: "tentative",
            host: "user@email",
            calendar: "calendar_id",
            creator: "optional@secretary",
            attendees: [
                {
                    name: "Bob",
                    email: "bob@place.com",
                    visit_expected: true

                },
                {
                    name: "Steve",
                    email: "steve@mail.com",
                    phone: "+61 234 345 678",
                    organisation: "T-Mart",
                    notes: "great guy",
                    checked_in: false,
                    visit_expected: false,
                    photo: "https://storage.com/steve.jpeg",
                    extension_data: {
                        whatever: "you want",
                        perferred_coffee: "Flat white, skim milk, one sugar"
                    }
                }
            ],
            title:  "name of the meeting",
            body: "new event details",
            private: false,
            event_start: 12345,
            event_end: 23456,
            timezone: "Sydney",
            all_day: false,
            location: "clear text location",
            recurring: true,
            recurrence: {
                range_start: 12345,
                range_end: 23456,
                days_of_week: 4,
                interval: 2,
                pattern: 1
            },
            recurring_master_id: "abcd",
            attachments: [
                {
                    name: "file_name.ext",
                    blob: "base64 bytes"
                }
            ],
            system: {
                id: "system id used to obtain this event",
                name: "system display name",
                capacity: 3,
                features: "VidConf Whiteboard",
                bookable: true
            },
            extension_data: {
                whatever: "you want",
                catering_order: [{
                    item: "Choc Cake",
                    qty: 1
                }]
            }
        }


### Edit an event [PATCH /api/staff/v1/events/{event_id}/?system_id={system_id}&calendar={calendar}]

edits the details of an event, allowed if the staff member is attending.

NOTE: either one of `calendar` or `system_id` is required.

+ Parameters
    + event_id: `id` (URI param, required) - (string) the ID of the event
    + calendar: `personal@calendar` (Query param, optional) - (string) the personal calendar this event exists on
    + system_id: `sysid` (Query param, optional) - (string) the system representing the calendar this event exists on

+ Request (application/json)

        {
            status: "accepted",
            body: "new event details",
            attendees: [
                {
                    name: "Bob",
                    email: "bob@place.com",
                    visit_expected: true
                },
                {
                    name: "Steve",
                    email: "steve@mail.com",
                    visit_expected: true
                }
            ],
            extension_data: {
                catering_order: [{
                    item: "Choc Cake",
                    qty: 1
                }]
            }
        }

+ Response 202 (application/json)

        {
            id: "abcd",
            status: "accepted",
            host: "user@email"
            calendar: "calendar_id"
            creator: "optional@secretary",
            attendees: [
                {
                    name: "Bob",
                    email: "bob@place.com"
                },
                {
                    name: "Steve",
                    email: "steve@mail.com",
                    phone: "+61 234 345 678",
                    organisation: "T-Mart",
                    notes: "great guy",
                    checked_in: false,
                    visit_expected: true,
                    photo: "https://storage.com/steve.jpeg",
                    extension_data: {
                        whatever: "you want",
                        perferred_coffee: "Flat white, skim milk, one sugar"
                    }
                }
            ],
            title:  "name of the meeting",
            body: "new event details",
            private: false,
            event_start: 12345,
            event_end: 23456,
            timezone: "Sydney",
            all_day: false,
            location: "clear text location",
            recurring: true,
            recurrence: {
                range_start: 12345,
                range_end: 23456,
                days_of_week: 4,
                interval: 2,
                pattern: 1
            },
            recurring_master_id: "abcd",
            attachments: [
                {
                    name: "file_name.ext",
                    blob: "base64 bytes"
                }
            ],
            system: {
                id: "system id used to obtain this event",
                name: "system display name",
                capacity: 3,
                features: "VidConf Whiteboard",
                bookable: true
            },
            extension_data: {
                whatever: "you want",
                catering_order: [{
                    item: "Choc Cake",
                    qty: 1
                }]
            }
        }

 

### Delete event [DELETE /api/staff/v1/events/{event_id}/?system_id={system_id}&calendar={calendar}&notify={notify}]

Delete an event

NOTE: either one of `calendar` or `system_id` is required.

+ Parameters
    + event_id: `id` (URI param, required) - (string) the ID of the event
    + calendar: `personal@calendar` (Query param, optional) - (string) the personal calendar this event exists on
    + system_id: `sysid` (Query param, optional) - (string) the system representing the calendar this event exists on
    + notify: `false` (Query param, optional) - (bool) defaults to notifying attendees, use this to suppress notifications

+ Response 202


### Approve an event in a resource [POST /api/staff/v1/events/{event_id}/approve?system_id={system_id}]

If a resource calendar has an event with `responseStatus: "needsAction"` the meeting can be approved by a resource manager.
In the case of Exchange Online (o365):
This effectively causes the room mailbox to "Accept" the meeting invite that it was invited to. 
The Host will then generally receive an email stating that room has accepted.

+ Parameters
    + event_id: `id` (URI param, required) - (string) the ID of the event
    + system_id: `sysid` (Query param, required) - (string) the system representing the calendar this event exists on

+ Response 202 (application/json)

        {
            id: "abcd",
            status: "accepted",
            host: "user@email"
            calendar: "calendar_id"
            creator: "optional@secretary",
            attendees: [
                {
                    name: "Room 1234",
                    email: "resource1234@place.com",
                    resource: true,
                    response_status: "accepted"
                },
                {
                    name: "Steve",
                    email: "steve@mail.com",
                    phone: "+61 234 345 678",
                    organisation: "T-Mart",
                    notes: "great guy",
                    checked_in: false,
                    visit_expected: true,
                    photo: "https://storage.com/steve.jpeg",
                    extension_data: {
                        whatever: "you want",
                        perferred_coffee: "Flat white, skim milk, one sugar"
                    }
                }
            ],
            title:  "name of the meeting",
            body: "new event details",
            private: false,
            event_start: 12345,
            event_end: 23456,
            timezone: "Sydney",
            all_day: false,
            location: "clear text location",
            recurring: true,
            recurrence: {
                range_start: 12345,
                range_end: 23456,
                days_of_week: 4,
                interval: 2,
                pattern: 1
            },
            attachments: [
                {
                    name: "file_name.ext",
                    blob: "base64 bytes"
                }
            ],
            system: {
                id: "system id used to obtain this event",
                name: "system display name",
                capacity: 3,
                features: "VidConf Whiteboard",
                bookable: true
            },
            extension_data: {
                whatever: "you want",
                catering_order: [{
                    item: "Choc Cake",
                    qty: 1
                }]
            }
        }

### Reject an event in a resource [POST /api/staff/v1/events/{event_id}/reject?system_id={system_id}]

If a resource calendar has an event with `responseStatus: "needsAction"` the meeting can be rejected by a resource manager

In the case of Exchange Online (o365):
This effectively causes the room mailbox to "Decline" the meeting invite that it was invited to. 
The Host will then generally receive an email stating that room has declined.

+ Parameters
    + event_id: `id` (URI param, required) - (string) the ID of the event
    + system_id: `sysid` (Query param, required) - (string) the system representing the calendar this event exists on

+ Response 202 (application/json)

        {
            id: "abcd",
            status: "accepted",
            host: "user@email"
            calendar: "calendar_id"
            creator: "optional@secretary",
            attendees: [
                {
                    name: "Room 1234",
                    email: "resource1234@place.com",
                    resource: true,
                    response_status: "declined"
                },
                {
                    name: "Steve",
                    email: "steve@mail.com",
                    phone: "+61 234 345 678",
                    organisation: "T-Mart",
                    notes: "great guy",
                    checked_in: false,
                    visit_expected: true,
                    photo: "https://storage.com/steve.jpeg",
                    extension_data: {
                        whatever: "you want",
                        perferred_coffee: "Flat white, skim milk, one sugar"
                    }
                }
            ],
            title:  "name of the meeting",
            body: "new event details",
            private: false,
            event_start: 12345,
            event_end: 23456,
            timezone: "Sydney",
            all_day: false,
            location: "clear text location",
            recurring: true,
            recurrence: {
                range_start: 12345,
                range_end: 23456,
                days_of_week: 4,
                interval: 2,
                pattern: 1
            },
            attachments: [
                {
                    name: "file_name.ext",
                    blob: "base64 bytes"
                }
            ],
            system: {
                id: "system id used to obtain this event",
                name: "system display name",
                capacity: 3,
                features: "VidConf Whiteboard",
                bookable: true
            },
            extension_data: {
                whatever: "you want",
                catering_order: [{
                    item: "Choc Cake",
                    qty: 1
                }]
            }
        }



### Guest list [GET /api/staff/v1/events/{event_id}/guests?system_id={system_id}&calendar={calendar}]

Returns the list of guests that are attending an event

+ Parameters
    + event_id: `id` (URI param, required) - (string) the ID of the event
    + system_id: `sysid` (Query param, required) - (string) the system representing the calendar this event exists on

+ Response 200

        [
            {
                name: "Steve",
                email: "steve@mail.com",
                phone: "+61 234 345 678",
                organisation: "T-Mart",
                notes: "great guy",
                checked_in: false,
                visit_expected: true,
                photo: "https://storage.com/steve.jpeg",
                extension_data: {
                    whatever: "you want",
                    perferred_coffee: "Flat white, skim milk, one sugar"
                }
            }
        ]
        
### Guest check-in [POST /api/staff/v1/events/{event_id}/guests/{guest_id}/checkin?state={state}&system_id={system_id}&calendar={calendar}]

Returns the list of guests that are attending an event

+ Parameters
    + event_id: `eventid` (URI param, required) - (string) the ID of the event
    + guest_id: `guestid` (URI param, required) - (string) the ID of the guest
    + state: `true` (Query param, optional) - (bool) the check-in state for the meeting, defaults to true
    + system_id: `sysid` (Query param, required) - (string) the system representing the calendar this event exists on

+ Response 200

        {
            name: "Steve",
            email: "steve@mail.com",
            phone: "+61 234 345 678",
            organisation: "T-Mart",
            notes: "great guy",
            checked_in: true,
            visit_expected: true,
            photo: "https://storage.com/steve.jpeg",
            extension_data: {
                whatever: "you want",
                perferred_coffee: "Flat white, skim milk, one sugar"
            }
        }



## Guests [/api/staff/v1/guests]

Guests are attendees of Events created with the PlaceOS api where:
- The attendee in the Event was marked with `visit_expected: true` indicating that the Event organizer expects this person to physically come to the building to attende the meeting.
- The attendee's email address domain is NOT one of the pre-defined internal enterprise email domains (configured during the set up of the PlaceOS instance).

### Search guests [GET /api/staff/v1/guests?q={q}]

Returns the list of guests that have ever been entered into the system and if they are currently checked in or expected

+ Parameters
    + q: `search` (Query param, optional) - (string) the search string

+ Response 200

        [
            {
                name: "Steve",
                email: "steve@mail.com",
                phone: "+61 234 345 678",
                organisation: "T-Mart",
                notes: "great guy",
                photo: "https://storage.com/steve.jpeg"
            }
        ]


### List visiting guests [GET /api/staff/v1/guests?zone_ids={zone_ids}&system_ids={system_ids}&period_start={period_start}&period_end={period_end}]

Returns the guest list for a specified time range

+ Parameters
    + zone_ids: `id1,id2` (Query param, optional) - (string) check rooms in the selected zones
    + system_ids: `sys1,sys2` (Query param, optional) - (string) check specified rooms
    + period_start: `12345` (Query param, required) - (integer) unix epoch start time 
    + period_end: `23456` (Query param, required) - (integer) unix epoch end time

+ Response 200

        [
            {
                name: "Steve",
                email: "steve@mail.com",
                phone: "+61 234 345 678",
                organisation: "T-Mart",
                notes: "great guy",
                photo: "https://storage.com/steve.jpeg",
                checked_in: false,
                // is the guest expected in this time range
                visit_expected: true,
                event: {
                    id: "abcd",
                    status: "tentative",
                    host: "user@email",
                    creator: "optional@secretary",
                    title:  "name of the meeting",
                    private: false,
                    event_start: 12345,
                    event_end: 23456,
                    timezone: "Sydney",
                    all_day: false,
                    system: {
                        id: "system id used to obtain this event",
                        name: "system display name",
                        capacity: 3,
                        features: "VidConf Whiteboard",
                        bookable: true
                    }
                }
            }
        ]


### Show guest [GET /api/staff/v1/guests/{guest_id}]

Return the guest details

+ Parameters
    + guest_id: `guest@email` (URI param, required) - the email address of the attending

+ Response 200 (application/json)

        {
            name: "Steve",
            email: "steve@mail.com",
            phone: "+61 234 345 678",
            organisation: "T-Mart",
            notes: "great guy",
            checked_in: false,
            // Is the guest expected today
            visit_expected: true,
            photo: "https://storage.com/steve.jpeg",
            extension_data: {
                whatever: "you want",
                perferred_coffee: "Flat white, skim milk, one sugar"
            }
        }



### Edit guest metadata [PATCH /api/staff/v1/guests/{guest_id}]

Updates personal details about the guest in question

+ Parameters
    + guest_id: `guest@email` (URI param, required) - the email address of the attending
    
+ Request (application/json)

        {
            name: "Steve",
            phone: "+61 234 345 678",
            organisation: "T-Mart",
            notes: "great guy",
            photo: "https://storage.com/steve.jpeg",
            extension_data: {
                whatever: "you want",
                perferred_coffee: "Flat white, skim milk, one sugar"
            }
        }

+ Response 202 (application/json)

        {
            name: "Steve",
            email: "steve@mail.com",
            phone: "+61 234 345 678",
            organisation: "T-Mart",
            notes: "great guy",
            checked_in: false,
            visit_expected: true,
            photo: "https://storage.com/steve.jpeg",
            extension_data: {
                whatever: "you want",
                perferred_coffee: "Flat white, skim milk, one sugar"
            }
        }


          
### Delete guest metadata [DELETE /api/staff/v1/guests/{guest_id}]

Delete metadata related to a specific guest

+ Parameters
    + guest_id: `guest@email` (URI param, required) - the email address of the attending

+ Response 202


### Guest upcoming visits [GET /api/staff/v1/guests/{guest_id}/meetings]

Return a list of upcoming meetings this guest is attending

+ Parameters
    + guest_id: `guest@email` (URI param, required) - the email address of the attending

+ Response 200 (application/json)

        [
            {
                host: "user@email",
                host_name: "Bob",
                event_id: "abcd",
                calendar: "calendar_id",
                title:  "name of the meeting",
                event_start: 12345,
                event_end: 23456,
                timezone: "Sydney",
                all_day: false
            }
        ]


## Staff [/api/staff/v1/people]


### Show staff [GET /api/staff/v1/people/{id}]

Return a specific staff member

+ Parameters
    + id: unique id or email address
    
+ Response 200 (application/json)

    {
        id: "a286bc46-4426-41ff-9298-ec30e5ef6f2d",
        name: "Steve",
        email: "steve@mail.com",
        phone: "+61 234 345 678",
        department: "Engineering",
        photo: "https://storage.com/steve.jpeg",
        card_number: 12345,
        username: "stevevt"
    }
        
        
### Search staff [GET /api/staff/v1/people?q={q}]

Search for a staff member, display their details

+ Parameters
    + q: `search` (Query param, optional) - (string) the search string
    
+ Response 200 (application/json)

        [
            {
                name: "Steve",
                email: "steve@mail.com",
                phone: "+61 234 345 678",
                department: "Engineering",
                photo: "https://storage.com/steve.jpeg",
                card_number: 12345,
                username: "stevevt"
            }
        ]

### Show Staff [GET /api/staff/v1/people/{email}/]

Looks up the details of a staff member using their email address or user id.

+ Parameters
    + email: `email@address` (URI param, optional) - (string) the email or user id of the staff member
    
+ Response 200 (application/json)

        {
            name: "Steve",
            email: "steve@mail.com",
            phone: "+61 234 345 678",
            department: "Engineering",
            photo: "https://storage.com/steve.jpeg",
            card_number: 12345,
            username: "stevevt"
        }
        

## Bookings [/api/staff/v1/bookings]

Bookings here refer to a user created reservation of resource that are represented natively in PlaceOS only. 
These bookings are not associated with an external directory like MS Graph or Google Calendar. They are stored only in the PlaceOS database.
PlaceOS bookings are most commonly used to reserve resources such as desks, car spaces, lockers, equipment, etc...

### Query bookings [GET /api/staff/v1/bookings?period_start={period_start}&period_end={period_end}&type={type}&zones={zones}&user={user}]

Returns the list of guests that have ever been entered into the system and if they are currently checked in or expected

+ Parameters
    + period_start: `1234` (Query param, required) - (integer) the start time as a unix epoch
    + period_end: `1235` (Query param, required) - (integer) the end time as a unix epoch
    + type: `desks` (Query param, required) - (string) the booking category we are interested in
    + zones: `zone-1234,zone-4567` (Query param, optional) - (string) limits the search to the items in the zones specified
    + user: `current` (Query param, optional) - (string) limits the search to the user specified or `current` user

+ Response 200

        [
            {
                id: 123,
                user_id: "user-1234",
                user_email: "steve@domain.com",
                user_name: "Name at Time of Booking",
                
                asset_id: "desk-12234",
                zones: ["zone-123",  "zone-456"],
                booking_type: "desk",

                booking_start: 1234567,
                booking_end: 1234589,
                timezone: "Sydney",
                
                title: "optional",
                description: "optional",
                
                checked_in: false,
                rejected: false,
                approved: true,
                approver_id: "user-5678",
                approver_email: "admin@domain.com",
                approver_name: "Bob Jane",
                extension_data: {
                    anykind_of_data: "user defined"
                }
            }
        ]


### Show booking [GET /api/staff/v1/bookings/{booking_id}]

Return the guest details

+ Parameters
    + booking_id: `1234` (URI param, required) - the id of the booking

+ Response 200 (application/json)

        {
            id: 123,
            user_id: "user-1234",
            user_email: "steve@domain.com",
            user_name: "Name at Time of Booking",
            
            asset_id: "desk-12234",
            zones: ["zone-123",  "zone-456"],
            booking_type: "desk",

            booking_start: 1234567,
            booking_end: 1234589,
            timezone: "Sydney",
            
            title: "optional",
            description: "optional",
            
            checked_in: false,
            rejected: false,
            approved: true,
            approver_id: "user-5678",
            approver_email: "admin@domain.com",
            approver_name: "Bob Jane",
            extension_data: {
                anykind_of_data: "user defined"
            }
        }


### Create booking [POST /api/staff/v1/bookings/]

Creates a new booking
    
+ Request (application/json)

        {
            asset_id: "desk-12234",
            zones: ["zone-123",  "zone-456"],
            booking_type: "desk",

            booking_start: 1234567,
            booking_end: 1234589,
            timezone: "Sydney",
            
            title: "optional",
            description: "optional",
            extension_data: {
                anykind_of_data: "user defined"
            }
        }

+ Response 200 (application/json)

        {
            id: 123,
            user_id: "user-1234",
            user_email: "steve@domain.com",
            user_name: "Name at Time of Booking",
            
            asset_id: "desk-12234",
            zones: ["zone-123",  "zone-456"],
            booking_type: "desk",

            booking_start: 1234567,
            booking_end: 1234589,
            timezone: "Sydney",
            
            title: "optional",
            description: "optional",
            
            checked_in: false,
            rejected: false,
            approved: false,
            approver_id: nil,
            approver_email: nil,
            approver_name: nil,
            extension_data: {
                anykind_of_data: "user defined"
            }
        }


### Edit booking [PATCH /api/staff/v1/bookings/{booking_id}]

Edits an existing booking

+ Parameters
    + booking_id: `1234` (URI param, required) - the id of the booking
    
+ Request (application/json)

        {
            asset_id: "desk-12234",
            zones: ["zone-123",  "zone-456"],
            booking_type: "desk",

            booking_start: 1234567,
            booking_end: 1234589,
            timezone: "Sydney",
            
            title: "optional",
            description: "optional",
            extension_data: {
                anykind_of_data: "user defined"
            }
        }

+ Response 202 (application/json)

        {
            id: 123,
            user_id: "user-1234",
            user_email: "steve@domain.com",
            user_name: "Name at Time of Booking",
            
            asset_id: "desk-12234",
            zones: ["zone-123",  "zone-456"],
            booking_type: "desk",

            booking_start: 1234567,
            booking_end: 1234589,
            timezone: "Sydney",
            
            title: "optional",
            description: "optional",
            
            checked_in: false,
            rejected: false,
            approved: false,
            approver_id: nil,
            approver_email: nil,
            approver_name: nil,
            extension_data: {
                anykind_of_data: "user defined"
            }
        }


### Delete booking [DELETE /api/staff/v1/bookings/{booking_id}]

Deletes an existing booking

+ Parameters
    + booking_id: `1234` (URI param, required) - the id of the booking
    
+ Response 202


### Approve booking [POST /api/staff/v1/bookings/{booking_id}/approve]

Approves a booking

+ Parameters
    + booking_id: `1234` (URI param, required) - the id of the booking

+ Response 200 (application/json)

        {
            id: 123,
            user_id: "user-1234",
            user_email: "steve@domain.com",
            user_name: "Name at Time of Booking",
            
            asset_id: "desk-12234",
            zones: ["zone-123",  "zone-456"],
            booking_type: "desk",

            booking_start: 1234567,
            booking_end: 1234589,
            timezone: "Sydney",
            
            title: "optional",
            description: "optional",
            
            checked_in: false,
            rejected: false,
            approved: true,
            approver_id: "user-5678",
            approver_email: "admin@domain.com",
            approver_name: "Bob Jane",
            extension_data: {
                anykind_of_data: "user defined"
            }
        }


### Reject booking [POST /api/staff/v1/bookings/{booking_id}/reject]

Rejects a booking

+ Parameters
    + booking_id: `1234` (URI param, required) - the id of the booking

+ Response 200 (application/json)

        {
            id: 123,
            user_id: "user-1234",
            user_email: "steve@domain.com",
            user_name: "Name at Time of Booking",
            
            asset_id: "desk-12234",
            zones: ["zone-123",  "zone-456"],
            booking_type: "desk",

            booking_start: 1234567,
            booking_end: 1234589,
            timezone: "Sydney",
            
            title: "optional",
            description: "optional",
            
            checked_in: false,
            rejected: true,
            approved: false,
            approver_id: nil,
            approver_email: nil,
            approver_name: nil,
            extension_data: {
                anykind_of_data: "user defined"
            }
        }


### Check-in booking [POST /api/staff/v1/bookings/{booking_id}/check_in?state={state}]

Checks in a booking, person turned up

+ Parameters
    + booking_id: `1234` (URI param, required) - the id of the booking
    + state: `false` (Query param, optional) - (bool) maybe you want to check-out

+ Response 200 (application/json)

        {
            id: 123,
            user_id: "user-1234",
            user_email: "steve@domain.com",
            user_name: "Name at Time of Booking",
            
            asset_id: "desk-12234",
            zones: ["zone-123",  "zone-456"],
            booking_type: "desk",

            booking_start: 1234567,
            booking_end: 1234589,
            timezone: "Sydney",
            
            title: "optional",
            description: "optional",
            
            checked_in: true,
            rejected: false,
            approved: true,
            approver_id: "user-5678",
            approver_email: "admin@domain.com",
            approver_name: "Bob Jane",
            extension_data: {
                anykind_of_data: "user defined"
            }
        }
        

## Tenants [/api/staff/v1/tenants]

A Tenant is a reference and credential to an external directory where PlaceOS will manage events and query users.
[MS Graph](https://docs.microsoft.com/en-us/graph/auth-register-app-v2) (aka Office365) and [Google Calendar](https://developers.google.com/calendar/auth) are supported

### List tenants [GET /api/staff/v1/tenants]

Returns the list of tenants

+ Response 200

[
    {
        "id": 1,
        "name": "a_friendly_tenant_label",
        "domain": "an_existing_placeos_DOMAIN",
        "platform": "office365"
    },
    {
        "id": 2,
        "name": "another_friendly_tenant_label",
        "domain": "an_existing_placeos_DOMAIN",
        "platform": "google"
    }
]



### Create Tenant [POST /api/staff/v1/tenants]

Create a new tenant

+ Request (application/json)

{
    "name": "an_o365_example",
    "domain": "an_existing_placeos_DOMAIN",
    "platform": "office365",
    "credentials": {
      "tenant": <string>,
      "client_id":   <string>,
      "client_secret": <string>    }
}

+ Request (application/json)

{
    "name": "a_google_example",
    "domain": "an_existing_placeos_DOMAIN",
    "platform": "google",
    "credentials": {
      issuer:      <string>,
      signing_key: <string>,
      scopes:      <string>,
      domain:      <string>,
      sub:         <string>,
      user_agent:  <string>
    }
}

+ Response 201

{
    "name": "an_o365_example",
    "domain": "an_existing_placeos_DOMAIN",
    "platform": "office365",
    "credentials": {
      "tenant": <string>,
      "client_id":   <string>,
      "client_secret": <string>    }
}


### Delete tenant [GET /api/staff/v1/tenants/{id}]

Delete a tenant

+ Parameters
    + id: `1234` (URI param, required) - the id of the tenant
 
+ Response 202